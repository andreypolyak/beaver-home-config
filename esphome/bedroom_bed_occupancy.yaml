substitutions:
  hostname: bedroom-bed-occupancy
  name: Bedroom Bed Occupancy
  ip: 192.168.1.98

esphome:
  name: $hostname
  platform: ESP32
  board: esp-wrover-kit
  on_boot:
    priority: -100
    then:
      - wait_until:
          time.has_time:
      - delay: 1s
      - sensor.template.publish:
          id: uptime
          state: !lambda "return id(sntp_time).now().timestamp;"

time:
  - platform: sntp
    id: sntp_time
    timezone: UTC-3

wifi:
  ssid: !secret esphome_wifi_ssid
  password: !secret esphome_wifi_password
  use_address: $ip
  fast_connect: true
  power_save_mode: none
  ap:
    ssid: $hostname
    password: ""

logger:

api:

ota:

sensor:
  - platform: template
    name: $name Uptime
    update_interval: never
    device_class: timestamp
    id: uptime
  - platform: adc
    name: Bedroom Bed Left Sensor
    pin: GPIO33
    id: bedroom_bed_left_sensor
    unit_of_measurement: "%"
    device_class: ""
    state_class: ""
    update_interval: 0.1s
    attenuation: 11db
    filters:
      - lambda: return abs(100 - (x / 3.9 * 100));
      - median:
          window_size: 20
          send_every: 20
          send_first_at: 20

  - platform: adc
    name: Bedroom Bed Center Sensor
    pin: GPIO34
    id: bedroom_bed_center_sensor
    unit_of_measurement: "%"
    device_class: ""
    state_class: ""
    update_interval: 0.1s
    attenuation: 11db
    filters:
      - lambda: return abs(100 - (x / 3.9 * 100));
      - median:
          window_size: 20
          send_every: 20
          send_first_at: 20

  - platform: adc
    name: Bedroom Bed Right Sensor
    pin: GPIO32
    id: bedroom_bed_right_sensor
    unit_of_measurement: "%"
    device_class: ""
    state_class: ""
    update_interval: 0.1s
    attenuation: 11db
    filters:
      - lambda: return abs(100 - (x / 3.9 * 100));
      - median:
          window_size: 20
          send_every: 20
          send_first_at: 20

  - platform: adc
    name: Bedroom Bed Bottom Sensor
    pin: GPIO35
    id: bedroom_bed_bottom_sensor
    unit_of_measurement: "%"
    device_class: ""
    state_class: ""
    update_interval: 0.1s
    attenuation: 11db
    filters:
      - lambda: return abs(100 - (x / 3.9 * 100));
      - median:
          window_size: 20
          send_every: 20
          send_first_at: 20

binary_sensor:
  - platform: template
    name: Bedroom Bed Top Occupancy
    id: bedroom_bed_top_occupancy
    device_class: occupancy
    lambda: |-
      if (
        id(bedroom_bed_left_sensor).state > 15
        or id(bedroom_bed_center_sensor).state > 15
        or id(bedroom_bed_right_sensor).state > 15
        or (
          id(bedroom_bed_left_sensor).state
          + id(bedroom_bed_center_sensor).state
          + id(bedroom_bed_right_sensor).state
        ) > 30
      ) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: Bedroom Bed Bottom Occupancy
    id: bedroom_bed_bottom_occupancy
    device_class: occupancy
    lambda: |-
      if (id(bedroom_bed_bottom_sensor).state > 10) {
        return true;
      } else {
        return false;
      }
