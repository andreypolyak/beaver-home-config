vacuum_base:
  color: auto
  color_type: card
  show_label: false
  show_name: false
  hold_action:
    action: more-info
    entity: vacuum.roborock
    haptic: success
  styles:
    card:
      - height: 36px

vacuum_text:
  template: vacuum_base
  show_state: false
  show_name: true
  show_icon: false

vacuum_control:
  template: vacuum_base
  color: var(--paper-card-background-color)
  tap_action:
    action: call-service
    service: >
      [[[ return `vacuum.${variables.service}`; ]]]
    service_data:
      entity_id: vacuum.roborock
    haptic: success
  variables:
    service: ""

vacuum_play_pause:
  template: vacuum_base
  color: var(--paper-card-background-color)
  icon: >
    [[[
      if (["docked", "idle", "paused"].includes(states["vacuum.roborock"].state)) {
        return "mdi:play";
      } else {
        return "mdi:pause";
      }
    ]]]
  tap_action:
    action: call-service
    service: >
      [[[
        if (["docked", "idle", "paused"].includes(states["vacuum.roborock"].state)) {
          return "vacuum.start";
        } else {
          return "vacuum.pause";
        }
      ]]]
    service_data:
      entity_id: vacuum.roborock
    haptic: success

vacuum_go_to_bin:
  template: vacuum_base
  color: var(--paper-card-background-color)
  entity: script.vacuum_go_to_bin
  icon: mdi:trash-can-outline
  tap_action:
    action: call-service
    service: script.vacuum_go_to_bin
    haptic: success

vacuum_room:
  template: vacuum_base
  tap_action:
    action: call-service
    service: script.turn_on
    service_data:
      entity_id: >
        [[[
          if (entity.state === variables.room) {
            return "script.vacuum_stop";
          } else {
            return `script.vacuum_clean_${variables.room}`;
          }
        ]]]
    haptic: success
  state:
    - value: >
        [[[ return variables.room; ]]]
      operator: "=="
      color: var(--paper-item-icon-active-color)
    - operator: default
      color: var(--paper-card-background-color)
  variables:
    room: ""

vacuum_device:
  template: base_icon
  entity: input_select.vacuum_room_cleaning
  icon: mdi:broom
  hold_action:
    action: more-info
    entity: vacuum.roborock
    haptic: success
  tap_action:
    action: call-service
    service: script.turn_on
    service_data:
      entity_id: >
        [[[
          if (entity.state === variables.room) {
            return "script.vacuum_stop";
          } else {
            return `script.vacuum_clean_${variables.room}`;
          }
        ]]]
    haptic: success
  state:
    - value: >
        [[[ return variables.room; ]]]
      operator: "=="
      color: var(--paper-item-icon-active-color)
    - operator: default
      color: var(--paper-card-background-color)
  variables:
    room: ""
