base:
  styles:
    card:
      - height: 72px
base_icon:
  template: base
  show_label: false
  show_name: false
  color: auto
  color_type: card
base_label:
  template: base
  show_label: true
  show_icon: false
  show_state: false
header:
  show_label: false
  show_state: false
  show_icon: false
  color_type: icon
  styles:
    card:
      - height: 32px
      - box-shadow: none
      - background: none
      - font-size: 1.5em
      - font-weight: bold
      - padding: 0px
    icon:
      - width: 70%
    name:
      - justify-self: start
header_show_lights:
  template: header
  name: Lights (+)
  tap_action:
    action: navigate
    navigation_path: "#show_lights_details"
    haptic: success
header_hide_lights:
  template: header
  name: Lights (−)
  tap_action:
    action: navigate
    navigation_path: "#hide_lights_details"
    haptic: success
header_show_devices:
  template: header
  name: Devices (+)
  tap_action:
    action: navigate
    navigation_path: "#show_devices_details"
    haptic: success
header_hide_devices:
  template: header
  name: Devices (-)
  tap_action:
    action: navigate
    navigation_path: "#hide_devices_details"
    haptic: success
header_show_tv:
  template: header
  name: TV (+)
  tap_action:
    action: navigate
    navigation_path: "#show_tv_details"
    haptic: success
header_hide_tv:
  template: header
  name: TV (-)
  tap_action:
    action: navigate
    navigation_path: "#hide_tv_details"
    haptic: success
individual_virtual_switch:
  template: base_icon
  hold_action:
    action: more-info
    entity: >
      [[[ return "light." + variables.light_name ]]]
    haptic: success
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.light_name + "_virtual_switch_individual_toggle" ]]]
    haptic: success
  variables:
    light_name: ""
individual_virtual_switch_with_name:
  template: individual_virtual_switch
  show_name: true
person:
  template: base_icon
  show_entity_picture: true
  show_state: false
  show_label: true
  label: >
    [[[
      if (states["input_select." + variables.person + "_location"].state == "home")
        return "Home";
      else if (parseInt(states["proximity.ha_" + variables.person + "_home"].state) < 1000)
        return states["proximity.ha_" + variables.person + "_home"].state + " m"
      else
        return Math.floor(parseFloat(states["proximity.ha_" + variables.person + "_home"].state) / 1000) + " km"
    ]]]
  hold_action:
    action: more-info
    entity: >
      [[[ return "person." + variables.person ]]]
    haptic: success
  tap_action:
    action: call-service
    service: >
      [[[ return "script.find_iphone_" + variables.person ]]]
    haptic: success
  confirmation:
    text: >
      [[[ return "❗ Are you sure you want to find " + variables.person.charAt(0).toUpperCase() + variables.person.slice(1) + "'s phone?" ]]]
  state:
    - value: home
      operator: "=="
      color: var(--paper-item-icon-active-color)
    - value: home
      operator: "!="
      color: var(--paper-card-background-color)
  styles:
    entity_picture:
      - width: 35%
    custom_fields:
      battery:
        - position: absolute
        - right: 4px
        - top: 4px
        - font-size: 12px
      wifi:
        - position: absolute
        - right: 4px
        - top: 20px
        - font-size: 14px
  custom_fields:
    battery: >
      [[[ return states["device_tracker.ha_" + variables.phone].attributes.battery_level + "%" ]]]
    wifi: >
      [[[
        if (states["device_tracker.wifi_" + variables.phone].state == "home")
        return `<ha-icon
          icon="mdi:wifi"
          style="width: 14px; height: 14px;">
          </ha-icon>`;
        else
        return ``;
      ]]]
  variables:
    person: ""
    phone: ""
scene:
  template: base_icon
  state:
    - value: >
        [[[ return variables.scene ]]]
      operator: "=="
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return variables.scene ]]]
      operator: "!="
      color: var(--paper-card-background-color)
  variables:
    scene: ""
living_scene:
  template: scene
  tap_action:
    action: call-service
    service: input_select.select_option
    haptic: success
    service_data:
      entity_id: input_select.living_scene
      option: >
        [[[ return variables.scene ]]]
  hold_action:
    action: call-service
    service: input_select.select_option
    haptic: success
    service_data:
      entity_id: input_select.living_scene
      option: away
    confirmation:
      text: >
        [[[ return "❗ Are you sure you want to turn on away scene?" ]]]
  variables:
    scene: ""
sleeping_scene:
  template: scene
  tap_action:
    action: call-service
    service: input_select.select_option
    haptic: success
    service_data:
      entity_id: input_select.sleeping_scene
      option: >
        [[[ return variables.scene ]]]
  hold_action:
    action: call-service
    service: input_select.select_option
    haptic: success
    service_data:
      entity_id: input_select.sleeping_scene
      option: away
    confirmation:
      text: >
        [[[ return "❗ Are you sure you want to turn on away scene?" ]]]
  variables:
    scene: ""
navigation:
  show_label: false
  show_name: false
  state:
    - operator: template
      value: >
        [[[ return window.location.pathname.split("/").slice(-1)[0].includes(variables.name) ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[ return !window.location.pathname.split("/").slice(-1)[0].includes(variables.name) ]]]
      color: var(--paper-card-background-color)
  color_type: card
  tap_action:
    action: navigate
    navigation_path: >
      [[[ return "/lovelace/" + variables.name ]]]
    haptic: success
  styles:
    card:
      - height: 48px
    icon:
      - width: 70%
  variables:
    name: ""
navigation_settings:
  template: navigation
  triggers_update:
    - binary_sensor.system_healthy
    - binary_sensor.system_up_to_date
  styles:
    custom_fields:
      attention:
        - position: absolute
        - right: 2px
        - top: -4px
  custom_fields:
    attention: >
      [[[
        if (states["binary_sensor.system_healthy"].state == "off")
          return `<ha-icon
            icon="mdi:alert-circle-outline"
            style="width: 10px; height: 10px;">
            </ha-icon>`;
        else if (states["binary_sensor.system_up_to_date"].state == "off")
          return `<ha-icon
            icon="mdi:download-circle-outline"
            style="width: 10px; height: 10px;">
            </ha-icon>`;
        else return "";
      ]]]
  variables:
    name: settings
navigation_equal:
  show_label: false
  state:
    - operator: template
      value: >
        [[[ return window.location.pathname.split("/").slice(-1)[0] == variables.name ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[ return !window.location.pathname.split("/").slice(-1)[0] != variables.name ]]]
      color: var(--paper-card-background-color)
  color_type: card
  tap_action:
    action: navigate
    navigation_path: >
      [[[ return "/lovelace/" + variables.name ]]]
    haptic: success
  styles:
    card:
      - height: 48px
    icon:
      - width: 70%
  variables:
    name: ""
brightness:
  icon: mdi:brightness-6
  color_type: card
  show_label: false
  show_name: true
  hold_action:
    action: more-info
    entity: >
      [[[ return "light.ha_group_" + variables.room ]]]
    haptic: success
  tap_action:
    action: call-service
    haptic: success
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_set_brightness" ]]]
      custom_event_data2: >
        [[[ return variables.brightness ]]]
  styles:
    card:
      - height: 48px
  variables:
    room: ""
    brightness: ""
brightness_1:
  template: brightness
  name: 1%
  state:
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness < 11;
        ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness >= 11;
        ]]]
      color: var(--paper-card-background-color)
  styles:
    card:
      - height: 48px
  variables:
    room: ""
    brightness: 3
brightness_25:
  template: brightness
  name: 25%
  state:
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness >= 11
          && states["light.ha_group_" + variables.room].attributes.brightness < 95;
        ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && (states["light.ha_group_" + variables.room].attributes.brightness < 11
          || states["light.ha_group_" + variables.room].attributes.brightness >= 95);
        ]]]
      color: var(--paper-card-background-color)
  variables:
    room: ""
    brightness: 63
brightness_50:
  template: brightness
  name: 50%
  state:
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness >= 95
          && states["light.ha_group_" + variables.room].attributes.brightness < 159;
        ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && (states["light.ha_group_" + variables.room].attributes.brightness < 95
          || states["light.ha_group_" + variables.room].attributes.brightness >= 159);
        ]]]
      color: var(--paper-card-background-color)
  variables:
    room: ""
    brightness: 127
brightness_75:
  template: brightness
  name: 75%
  state:
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness >= 159
          && states["light.ha_group_" + variables.room].attributes.brightness < 243;
        ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && (states["light.ha_group_" + variables.room].attributes.brightness < 159
          || states["light.ha_group_" + variables.room].attributes.brightness >= 243);
        ]]]
      color: var(--paper-card-background-color)
  variables:
    room: ""
    brightness: 191
brightness_100:
  template: brightness
  name: 100%
  state:
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness >= 243;
        ]]]
      color: var(--paper-item-icon-active-color)
    - operator: template
      value: >
        [[[
          return states["light.ha_group_" + variables.room].attributes
          && states["light.ha_group_" + variables.room].attributes.brightness < 243;
        ]]]
      color: var(--paper-card-background-color)
  variables:
    room: ""
    brightness: 254
alarm:
  color: auto
  color_type: card
  show_label: false
  show_icon: true
  show_state: false
  show_name: false
  icon: >
      [[[
        if (states["input_boolean.alarm_" + variables.name].state === "on")
        return "mdi:alarm";
        else return "mdi:alarm-off";
      ]]]
  tap_action:
    action: call-service
    service: input_boolean.toggle
    service_data:
      entity_id: >
        [[[ return "input_boolean.alarm_" + variables.name ]]]
    haptic: success
  hold_action:
    action: more-info
    entity: >
      [[[ return "input_boolean.alarm_" + variables.name ]]]
    haptic: success
  styles:
    card:
      - width: 40px
      - height: 86px
  variables:
    name: ""
home_page_light:
  template: base_icon
  triggers_update: all
  double_tap_action:
    action: call-service
    service: input_boolean.toggle
    service_data:
      entity_id: >
        [[[ return "input_boolean.auto_lights_" + variables.room ]]]
    haptic: success
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_virtual_switch_room_toggle" ]]]
    haptic: success
  hold_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_toggle_max_brightness" ]]]
    haptic: success
  styles:
    custom_fields:
      lock:
        - position: absolute
        - right: 0px
        - top: 4px
        - font-size: 12px
  custom_fields:
    lock: >
      [[[
        if (states["input_boolean.auto_lights_" + variables.room].state === "off")
          return `<ha-icon
            icon="mdi:lock-outline"
            style="width: 12px; height: 12px;">
            </ha-icon>`;
        else return "";
      ]]]
  variables:
    room: ""
home_page_climate:
  triggers_update: all
  color: var(--primary-background-color)
  color_type: label-card
  show_label: false
  show_name: false
  show_icon: false
  tap_action:
    action: navigate
    navigation_path: /lovelace/settings_climate
    haptic: success
  styles:
    card:
      - height: 64px
      - box-shadow: none
    custom_fields:
      temperature:
        - position: absolute
        - left: 4px
        - top: 4px
        - font-size: 12px
      humidity:
        - position: absolute
        - left: 4px
        - top: 18px
        - font-size: 12px
      window:
        - position: absolute
        - left: 4px
        - top: 32px
        - font-size: 12px
      co2:
        - position: absolute
        - left: 4px
        - top: 46px
        - font-size: 12px
  custom_fields:
    temperature: >
      [[[
        if (variables.room == "balcony" && states["weather.home"] && states["weather.home"].attributes && states["weather.home"].attributes.temperature) {
          return `<ha-icon
            icon="mdi:thermometer"
            style="width: 12px; height: 12px;">
            </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_temperature"].state) + "°/"
            + Math.round(states["weather.home"].attributes.temperature) + "°";
        } else {
          return `<ha-icon
            icon="mdi:thermometer"
            style="width: 12px; height: 12px;">
            </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_temperature"].state) + "°";
        }
      ]]]
    humidity: >
      [[[
        return `<ha-icon
          icon="mdi:water-percent"
          style="width: 12px; height: 12px;">
          </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_humidity"].state) + "%";
      ]]]
    window: >
      [[[
        if ("sensor." + variables.room + "_window_target_position" in states) {
          return `<ha-icon
            icon="mdi:window-closed-variant"
            style="width: 12px; height: 12px;">
            </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_window_target_position"].state) + "%";
        } else {
          return " "
        }
      ]]]
    co2: >
      [[[
        if ("sensor." + variables.room + "_co2" in states) {
          return `<ha-icon
            icon="mdi:molecule-co2"
            style="width: 12px; height: 12px;">
            </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_co2"].state) + "ppm";
        } else {
          return " "
        }
      ]]]
  variables:
    room: ""
home_page_climate_co2:
  template: home_page_climate
  styles:
    custom_fields:
      temperature:
        - position: absolute
        - left: 4px
        - top: 4px
        - font-size: 12px
      humidity:
        - position: absolute
        - left: 4px
        - top: 18px
        - font-size: 12px
      co2:
        - position: absolute
        - left: 4px
        - top: 32px
        - font-size: 12px
  custom_fields:
    temperature: >
      [[[
        return `<ha-icon
          icon="mdi:thermometer"
          style="width: 12px; height: 12px;">
          </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_temperature"].state) + "°";
      ]]]
    humidity: >
      [[[
        return `<ha-icon
          icon="mdi:water-percent"
          style="width: 12px; height: 12px;">
          </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_humidity"].state) + "%";
      ]]]
    co2: >
      [[[
        return `<ha-icon
          icon="mdi:molecule-co2"
          style="width: 12px; height: 12px;">
          </ha-icon>` + " " + Math.round(states["sensor." + variables.room + "_co2"].state) + "ppm";
      ]]]
  variables:
    room: ""
light_color_base:
  show_label: false
  show_icon: false
  color_type: card
  styles:
    card:
      - height: 48px
light_color_rgb:
  template: light_color_base
  color: >
    [[[ return "rgb" + variables.rgb ]]]
  tap_action:
    action: call-service
    haptic: success
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_set_manual_color" ]]]
      custom_event_data2: >
        [[[ return variables.rgb ]]]
  variables:
    rgb: ""
    room: ""
light_color_hs:
  template: light_color_base
  color: >
    [[[ return "rgb" + variables.rgb ]]]
  tap_action:
    action: call-service
    haptic: success
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_set_manual_color" ]]]
      custom_event_data2: >
        [[[ return "(30," + variables.saturation + ")" ]]]
  variables:
    saturation: ""
    room: ""
light_color_kelvin:
  template: light_color_base
  tap_action:
    action: call-service
    haptic: success
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_set_manual_color" ]]]
      custom_event_data2: >
        [[[ return variables.kelvin ]]]
  variables:
    kelvin: ""
    room: ""
light_color_auto:
  template: light_color_base
  name: Auto
  tap_action:
    action: call-service
    haptic: success
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_set_auto_color" ]]]
  styles:
    card:
      - border: solid 2px var(--primary-text-color)
  variables:
    room: ""
vacuum_room:
  template: vacuum_base
  tap_action:
    action: call-service
    service: script.turn_on
    service_data:
      entity_id: >
        [[[
          if (entity.state === variables.room) {
            return "script.vacuum_stop";
          } else {
            return "script.vacuum_clean_" + variables.room;
          }
        ]]]
    haptic: success
  state:
    - value: >
        [[[ return variables.room ]]]
      operator: "=="
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return variables.room ]]]
      operator: "!="
      color: var(--paper-card-background-color)
  variables:
    room: ""
vacuum_base:
  color: auto
  color_type: card
  show_label: false
  show_name: false
  hold_action:
    action: more-info
    entity: vacuum.rockrobo
    haptic: success
  styles:
    card:
      - height: 36px
vacuum_device:
  template: base_icon
  entity: input_select.vacuum_room_cleaning
  icon: mdi:broom
  hold_action:
    action: more-info
    entity: vacuum.rockrobo
    haptic: success
  tap_action:
    action: call-service
    service: script.turn_on
    service_data:
      entity_id: >
        [[[
          if (entity.state === variables.room) {
            return "script.vacuum_stop";
          } else {
            return "script.vacuum_clean_" + variables.room;
          }
        ]]]
    haptic: success
  state:
    - value: >
        [[[ return variables.room ]]]
      operator: "=="
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return variables.room ]]]
      operator: "!="
      color: var(--paper-card-background-color)
  variables:
    room: ""
cover_device:
  template: base_icon
  triggers_update:
    - input_boolean.bedroom_cover_active
    - input_boolean.kitchen_cover_active
    - input_boolean.living_room_cover_active
  icon: >
    [[[
      if (states["cover." + variables.room + "_cover"].attributes.position < 100)
        return "mdi:blinds";
      else
        return "mdi:blinds-open";
    ]]]
  hold_action:
    action: more-info
    haptic: success
  tap_action:
    action: toggle
    haptic: success
  state:
    - value: >
        [[[ return states["input_boolean." + variables.room + "_cover_active"].state == "on" ]]]
      operator: "template"
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["input_boolean." + variables.room + "_cover_active"].state != "on" ]]]
      operator: "template"
      color: var(--paper-card-background-color)
    # - value: closed
    #   operator: "!="
    #   color: var(--paper-item-icon-active-color)
    # - value: closed
    #   operator: "=="
    #   color: var(--paper-card-background-color)
  # styles:
  #   custom_fields:
  #     working:
  #       - position: absolute
  #       - right: 8px
  #       - bottom: 8px
  #       - font-size: 12px
  # custom_fields:
  #   working: >
  #     [[[
  #       if (states["input_boolean." + variables.room + "_cover_active"].state == "on")
  #       return `<ha-icon
  #       icon="mdi:play"
  #       style="width: 14px; height: 14px;">
  #       </ha-icon>`;
  #       else
  #       return "";
  #     ]]]
  variables:
    room: ""
window_device:
  template: base_icon
  triggers_update:
    - input_boolean.auto_window_kitchen
    - input_boolean.auto_window_bedroom
    - sensor.kitchen_window
    - sensor.bedroom_window
  icon: mdi:window-closed-variant
  hold_action:
    action: more-info
    haptic: success
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_window" ]]]
      custom_event_data2: toggle
    haptic: success
  styles:
    custom_fields:
      position:
        - position: absolute
        - right: 8px
        - top: 8px
        - font-size: 12px
      auto:
        - position: absolute
        - left: 8px
        - top: 8px
        - font-size: 12px
      # working:
      #   - position: absolute
      #   - right: 8px
      #   - bottom: 8px
      #   - font-size: 12px
  state:
    - value: >
        [[[ return states["sensor." + variables.room + "_window"].state != "STOPPED" ]]]
      operator: "template"
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["sensor." + variables.room + "_window"].state == "STOPPED" ]]]
      operator: "template"
      color: var(--paper-card-background-color)
    # - value: closed
    #   operator: "!="
    #   color: var(--paper-item-icon-active-color)
    # - value: closed
    #   operator: "=="
    #   color: var(--paper-card-background-color)
  custom_fields:
    position: >
      [[[
        return Math.round(states["sensor." + variables.room + "_window_target_position"].state) + "%";
      ]]]
    auto: >
      [[[
        if (states["input_boolean.auto_window_" + variables.room].state == "on")
        return ``;
        else
        return `<ha-icon
          icon="mdi:lock-outline"
          style="width: 14px; height: 14px;">
          </ha-icon>`;
      ]]]
    # working: >
    #   [[[
    #     if (states["sensor." + variables.room + "_window"].state != "STOPPED")
    #     return `<ha-icon
    #     icon="mdi:play"
    #     style="width: 14px; height: 14px;">
    #     </ha-icon>`;
    #     else
    #     return "";
    #   ]]]
  variables:
    room: ""
window_settings:
  template: base
  show_label: false
  name: >
    [[[ return variables.room.charAt(0).toUpperCase() + variables.room.slice(1) ]]]
  icon: mdi:window-open-variant
  tap_action:
    action: navigate
    navigation_path: >
      [[[ return "/" + variables.room + "_drivent_panel" ]]]
    haptic: success
  hold_action:
    action: more-info
    entity: >
      [[[ return "cover." + variables.room + "_window" ]]]
    haptic: success
  variables:
    room: ""
auto_lights:
  color_type: card
  show_label: false
  show_name: false
  show_icon: true
  icon: >
    [[[
      if (states["input_boolean.auto_lights_" + variables.room].state == "on")
        return "mdi:motion-sensor";
      else
        return "mdi:motion-sensor-off";
    ]]]
  tap_action:
    action: toggle
    haptic: success
  styles:
    card:
      - height: 48px
      - border: solid 2px var(--primary-text-color)
  variables:
    room: ""
cover_base:
  show_label: false
  show_icon: false
  color_type: card
  styles:
    card:
      - height: 48px
cover_open:
  template: cover_base
  tap_action:
    action: call-service
    service: cover.set_cover_position
    service_data:
      entity_id: >
        [[[ return "cover." + variables.room + "_cover" ]]]
      position: 100
    haptic: success
  state:
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position == 100 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position != 100 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: Open
  variables:
    room: ""
cover_close:
  template: cover_base
  tap_action:
    action: call-service
    service: cover.set_cover_position
    service_data:
      entity_id: >
        [[[ return "cover." + variables.room + "_cover" ]]]
      position: 0
    haptic: success
  state:
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position == 0 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position != 0 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: Close
  variables:
    room: ""
kitchen_cover_ventilation:
  template: cover_base
  tap_action:
    action: call-service
    service: cover.set_cover_position
    service_data:
      entity_id: >
        [[[ return "cover." + variables.room + "_cover" ]]]
      position: 30
    haptic: success
  state:
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position == 30 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position != 30 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: Ventilation
  variables:
    room: ""
bedroom_cover_ventilation:
  template: cover_base
  tap_action:
    action: call-service
    service: cover.set_cover_position
    service_data:
      entity_id: >
        [[[ return "cover." + variables.room + "_cover" ]]]
      position: 15
    haptic: success
  state:
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position == 15 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["cover." + variables.room + "_cover"].attributes.position != 15 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: Ventilation
  variables:
    room: ""
window_base:
  show_label: false
  show_icon: false
  color_type: card
  styles:
    card:
      - height: 48px
window_position_0:
  template: window_base
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_window" ]]]
      custom_event_data2: 0
    haptic: success
  state:
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state == 0 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state != 0 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: 0%
  variables:
    room: ""
window_position_30:
  template: window_base
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_window" ]]]
      custom_event_data2: 30
    haptic: success
  state:
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state > 0 && states["sensor." + variables.room + "_window_target_position"].state < 50 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state == 0 || states["sensor." + variables.room + "_window_target_position"].state >= 50 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: 30%
  variables:
    room: ""
window_position_70:
  template: window_base
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_window" ]]]
      custom_event_data2: 70
    haptic: success
  state:
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state >= 50 && states["sensor." + variables.room + "_window_target_position"].state < 100 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state < 50 || states["sensor." + variables.room + "_window_target_position"].state == 100 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: 70%
  variables:
    room: ""
window_position_100:
  template: window_base
  tap_action:
    action: call-service
    service: script.fire_custom_event
    service_data:
      custom_event_data: >
        [[[ return variables.room + "_window" ]]]
      custom_event_data2: 100
    haptic: success
  state:
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state == 100 ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["sensor." + variables.room + "_window_target_position"].state != 100 ]]]
      operator: template
      color: var(--paper-card-background-color)
  name: 100%
  variables:
    room: ""
window_auto:
  template: window_base
  tap_action:
    action: toggle
    haptic: success
  name: >
    [[[
      if (entity.state === "on") {
        return "Auto";
      } else {
        return "Manual";
      }
    ]]]
  styles:
    card:
      - border: solid 2px var(--primary-text-color)
restart:
  template: base
  confirmation:
    text: >
      [[[ return "❗ Are you sure you want to restart " + variables.name + "?" ]]]
  variables:
    name: ""
restart_pi:
  template: restart
  color: auto
  color_type: card
  icon: mdi:raspberry-pi
  tap_action:
    action: call-service
    service: >
        [[[ return "shell_command.restart_rpi_" + variables.pi_item ]]]
    haptic: success
  state:
    - value: >
        [[[ return states["sensor.rpi_temp_rpi_" + variables.pi_item].state == "unavailable" ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["sensor.rpi_temp_rpi_" + variables.pi_item].state != "unavailable" ]]]
      operator: template
      color: var(--paper-card-background-color)
  variables:
    name: ""
    pi_item: ""
restart_z2m:
  template: restart
  color: auto
  color_type: card
  icon: mdi:zigbee
  tap_action:
    action: call-service
    service: hassio.addon_restart
    service_data:
      addon: >
        [[[ return variables.addon_item ]]]
    haptic: success
  state:
    - value: >
        [[[ return states["binary_sensor." + variables.addon_short_name + "_state"].state != "on" ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["binary_sensor." + variables.addon_short_name + "_state"].state == "on" ]]]
      operator: template
      color: var(--paper-card-background-color)
  variables:
    name: ""
    addon_item: ""
    addon_short_name: ""
restart_system:
  template: restart
  color: auto
  color_type: card
  state:
    - value: >
        [[[ return states["input_boolean." + variables.short_name + "_running"].state != "on" ]]]
      operator: template
      color: var(--paper-item-icon-active-color)
    - value: >
        [[[ return states["input_boolean." + variables.short_name + "_running"].state == "on" ]]]
      operator: template
      color: var(--paper-card-background-color)
  tap_action:
    action: call-service
    service: >
      [[[ return "script.restart_" + variables.short_name ]]]
    haptic: success
  variables:
    short_name: ""
    name: ""
config:
  template: base
  color: auto
  color_type: card
  tap_action:
    action: navigate
    navigation_path: >
        [[[ return variables.url ]]]
    haptic: success
  state:
    - value: >
        [[[ return 1 == 1 ]]]
      operator: template
      color: var(--paper-card-background-color)
  variables:
    url: ""
numeric_label:
  template: base_label
  color: auto
  color_type: card
  state:
    - value: 0
      operator: "!="
      color: var(--paper-item-icon-active-color)
    - value: 0
      operator: "=="
      color: var(--paper-card-background-color)
  label: >
    [[[ return parseInt(states[variables.entity].state, 0).toString() ]]]
  tap_action:
    action: navigate
    navigation_path: >
      [[[ return variables.path ]]]
    haptic: success
  variables:
    entity: ""
    path: ""
christmas:
  template: base
  color: red
  tap_action:
    action: toggle
    haptic: success
  hold_action:
    action: more-info
    haptic: success
cinema_scene:
  template: living_scene
  double_tap_action:
    action: call-service
    service: input_boolean.toggle
    service_data:
      entity_id: input_boolean.cinema_session
    haptic: success
  styles:
    custom_fields:
      session:
        - position: absolute
        - right: 4px
        - top: 4px
        - font-size: 14px
  custom_fields:
    session: >
      [[[
        if (states["input_boolean.cinema_session"].state == "on"
            && states["input_select.living_scene"].state != variables.scene)
        return `<ha-icon
          icon="mdi:play"
          style="width: 14px; height: 14px;">
          </ha-icon>`;
        else
        return ``;
      ]]]
  variables:
    scene: ""
tv_remote:
  template: base
  tap_action:
    action: call-service
    service: switch.turn_on
    service_data:
      entity_id: >
        [[[ return "switch.ir_tv_" + variables.command ]]]
    haptic: success
  variables:
    command: ""
tv_remote_compact:
  tap_action:
    action: call-service
    service: >
      [[[ return "script." + variables.command ]]]
    haptic: success
  styles:
    card:
      - height: 48px
  variables:
    command: ""
